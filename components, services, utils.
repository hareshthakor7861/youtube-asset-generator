import React from 'react';

const Header: React.FC = () => {
  return (
    <header className="bg-gray-900/50 backdrop-blur-sm border-b border-gray-700 sticky top-0 z-10">
      <div className="container mx-auto px-4 py-4 flex items-center justify-center">
        <h1 className="text-2xl sm:text-3xl font-bold tracking-tight text-transparent bg-clip-text bg-gradient-to-r from-red-500 to-red-700">
          YouTube Asset AI Generator
        </h1>
      </div>
    </header>
  );
};

export default Header;
import React from 'react';
import { AssetType } from '../types';

interface AssetSelectorProps {
  selectedAsset: AssetType;
  onSelectAsset: (assetType: AssetType) => void;
}

const AssetButton: React.FC<{
  label: AssetType;
  isSelected: boolean;
  onClick: () => void;
}> = ({ label, isSelected, onClick }) => {
  const baseClasses = "w-full text-center px-6 py-3 rounded-lg font-semibold transition-all duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-900";
  const selectedClasses = "bg-red-600 text-white shadow-lg";
  const unselectedClasses = "bg-gray-700 text-gray-300 hover:bg-gray-600";

  return (
    <button
      onClick={onClick}
      className={`${baseClasses} ${isSelected ? selectedClasses : unselectedClasses}`}
    >
      {label}
    </button>
  );
};

const AssetSelector: React.FC<AssetSelectorProps> = ({ selectedAsset, onSelectAsset }) => {
  return (
    <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-4">
      <AssetButton
        label={AssetType.Logo}
        isSelected={selectedAsset === AssetType.Logo}
        onClick={() => onSelectAsset(AssetType.Logo)}
      />
      <AssetButton
        label={AssetType.Banner}
        isSelected={selectedAsset === AssetType.Banner}
        onClick={() => onSelectAsset(AssetType.Banner)}
      />
      <AssetButton
        label={AssetType.Thumbnail}
        isSelected={selectedAsset === AssetType.Thumbnail}
        onClick={() => onSelectAsset(AssetType.Thumbnail)}
      />
      <AssetButton
        label={AssetType.Description}
        isSelected={selectedAsset === AssetType.Description}
        onClick={() => onSelectAsset(AssetType.Description)}
      />
      <AssetButton
        label={AssetType.Intro}
        isSelected={selectedAsset === AssetType.Intro}
        onClick={() => onSelectAsset(AssetType.Intro)}
      />
    </div>
  );
};

export default AssetSelector;
import React, { useState } from 'react';
import { generateImage } from '../services/geminiService';
import { YOUTUBE_LOGO_SIZE } from '../constants';
import ImagePreview from './ImagePreview';
import { AssetType } from '../types';
import { getFriendlyErrorMessage } from '../utils/errorHandler';

interface LogoGeneratorProps {
  onAssetGenerated: (item: { type: AssetType, imageUrl: string, prompt: string }) => void;
}

const LogoGenerator: React.FC<LogoGeneratorProps> = ({ onAssetGenerated }) => {
  const [prompt, setPrompt] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [imageUrl, setImageUrl] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim()) {
      setError('Please enter a description for your logo.');
      return;
    }

    setLoading(true);
    setError(null);
    setImageUrl(null);

    try {
      const fullPrompt = `Create a professional, circular YouTube channel logo with a transparent background. The logo should be based on this description: "${prompt}". It needs to be simple, memorable, and visually appealing in small sizes.`;
      const resultUrl = await generateImage(fullPrompt, YOUTUBE_LOGO_SIZE.aspectRatio);
      setImageUrl(resultUrl);
      onAssetGenerated({
        type: AssetType.Logo,
        imageUrl: resultUrl,
        prompt: prompt,
      });
    } catch (err: any) {
      setError(getFriendlyErrorMessage(err));
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <h2 className="text-2xl font-bold text-center mb-1 text-red-400">YouTube Logo Generator</h2>
      <p className="text-center text-gray-400 mb-6">Describe your channel to generate a unique logo (800x800 px).</p>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="logo-prompt" className="block text-sm font-medium text-gray-300 mb-1">
            Logo Description
          </label>
          <input
            id="logo-prompt"
            type="text"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="e.g., a minimalist gaming controller with neon lines"
            className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:ring-red-500 focus:border-red-500 transition"
            disabled={loading}
            title="Describe the key elements of your logo. e.g., 'a stylized letter S with a flame'."
          />
        </div>
        <button
          type="submit"
          disabled={loading}
          className="w-full bg-red-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-red-700 disabled:bg-red-800 disabled:cursor-not-allowed transition-colors duration-300 flex items-center justify-center"
        >
          {loading ? (
            <>
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-3"></div>
              Generating...
            </>
          ) : (
            'Generate Logo'
          )}
        </button>
      </form>
      <ImagePreview imageUrl={imageUrl} loading={loading} error={error} assetType="Logo" />
    </div>
  );
};

export default LogoGenerator;
import React, { useState } from 'react';
import { generateImage, generateImageWithImageInput } from '../services/geminiService';
import { YOUTUBE_BANNER_SIZE } from '../constants';
import ImagePreview from './ImagePreview';
import { AssetType } from '../types';
import { getFriendlyErrorMessage } from '../utils/errorHandler';

interface BannerGeneratorProps {
  onAssetGenerated: (item: { type: AssetType, imageUrl: string, prompt: string }) => void;
}

const BannerGenerator: React.FC<BannerGeneratorProps> = ({ onAssetGenerated }) => {
  const [prompt, setPrompt] = useState<string>('');
  const [logoFile, setLogoFile] = useState<File | null>(null);
  const [logoPreview, setLogoPreview] = useState<string | null>(null);
  
  const [useCustomSize, setUseCustomSize] = useState<boolean>(false);
  const [width, setWidth] = useState<number>(YOUTUBE_BANNER_SIZE.width);
  const [height, setHeight] = useState<number>(YOUTUBE_BANNER_SIZE.height);

  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [imageUrl, setImageUrl] = useState<string | null>(null);
  
  const handleLogoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setLogoFile(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setLogoPreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        const result = reader.result as string;
        // remove the data:mime/type;base64, prefix
        resolve(result.split(',')[1]);
      };
      reader.onerror = (error) => reject(error);
    });
  };


  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim()) {
      setError('Please enter a description for your banner.');
      return;
    }

    setLoading(true);
    setError(null);
    setImageUrl(null);

    const bannerDimensions = useCustomSize ? `${width}x${height}` : `${YOUTUBE_BANNER_SIZE.width}x${YOUTUBE_BANNER_SIZE.height}`;

    try {
      let resultUrl: string;

      if (logoFile) {
        const base64Data = await fileToBase64(logoFile);
        const fullPrompt = `Create a visually stunning YouTube channel banner (${bannerDimensions} pixels) with a 16:9 aspect ratio.
        - Theme: "${prompt}"
        - Instructions:
        1. Use the provided channel logo image. Place it tastefully and prominently within the banner's central safe area (1546x423 pixels), usually on the left or right side.
        2. Design a background and overall aesthetic that complements the logo and the channel theme.
        3. The core content (like channel name or tagline, which you should create if not specified) should be clearly visible within the safe area.
        4. The final design must be cohesive, professional, and captivating on all devices.`;
        resultUrl = await generateImageWithImageInput(fullPrompt, base64Data, logoFile.type);
      } else {
        const fullPrompt = `Create a visually stunning YouTube channel banner (${bannerDimensions} pixels). The core content and channel name should be clearly visible within the central safe area (1546x423 pixels). The banner's theme should be: "${prompt}". Design it to be captivating on desktop, mobile, and TV screens.`;
        resultUrl = await generateImage(fullPrompt, YOUTUBE_BANNER_SIZE.aspectRatio);
      }
      
      setImageUrl(resultUrl);
      onAssetGenerated({
        type: AssetType.Banner,
        imageUrl: resultUrl,
        prompt: prompt,
      });
    } catch (err: any) {
      setError(getFriendlyErrorMessage(err));
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <h2 className="text-2xl font-bold text-center mb-1 text-red-400">YouTube Banner Generator</h2>
      <p className="text-center text-gray-400 mb-6">Describe your channel's theme. Our AI will create a banner with the optimal size (2560x1440 px). You can also provide custom dimensions.</p>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="banner-prompt" className="block text-sm font-medium text-gray-300 mb-1">
            Banner Description
          </label>
          <input
            id="banner-prompt"
            type="text"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="e.g., a futuristic cityscape at night for a tech channel"
            className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:ring-red-500 focus:border-red-500 transition"
            disabled={loading}
            title="Describe the mood and style for your banner. e.g., 'a serene mountain landscape for a travel channel'."
          />
        </div>

        <div className="space-y-3">
            <label htmlFor="custom-size-toggle" className="flex items-center text-sm font-medium text-gray-300 cursor-pointer">
                <input
                    id="custom-size-toggle"
                    type="checkbox"
                    checked={useCustomSize}
                    onChange={(e) => setUseCustomSize(e.target.checked)}
                    className="h-4 w-4 rounded border-gray-500 bg-gray-800 text-red-600 focus:ring-red-600 focus:ring-offset-gray-900"
                    disabled={loading}
                />
                <span className="ml-2">Use Custom Banner Dimensions</span>
            </label>
            
            {useCustomSize && (
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 p-3 bg-gray-900/50 rounded-lg border border-gray-700">
                    <div>
                        <label htmlFor="banner-width" className="block text-xs font-medium text-gray-400 mb-1">Width (px)</label>
                        <input
                            id="banner-width"
                            type="number"
                            value={width}
                            onChange={(e) => setWidth(parseInt(e.target.value, 10) || 0)}
                            className="w-full px-3 py-1.5 bg-gray-700 border border-gray-600 rounded-md focus:ring-red-500 focus:border-red-500 transition text-sm"
                            disabled={loading}
                        />
                    </div>
                    <div>
                        <label htmlFor="banner-height" className="block text-xs font-medium text-gray-400 mb-1">Height (px)</label>
                        <input
                            id="banner-height"
                            type="number"
                            value={height}
                            onChange={(e) => setHeight(parseInt(e.target.value, 10) || 0)}
                            className="w-full px-3 py-1.5 bg-gray-700 border border-gray-600 rounded-md focus:ring-red-500 focus:border-red-500 transition text-sm"
                            disabled={loading}
                        />
                    </div>
                     <p className="col-span-1 sm:col-span-2 text-xs text-gray-500 mt-1">Note: The AI will design for these dimensions. The final image will be generated at a 16:9 aspect ratio.</p>
                </div>
            )}
        </div>


        <div>
          <label htmlFor="logo-upload" className="block text-sm font-medium text-gray-300 mb-1">
            Upload Channel Logo (Optional)
          </label>
          <div className="mt-2 flex items-center gap-4">
            {logoPreview && <img src={logoPreview} alt="Logo Preview" className="w-16 h-16 rounded-full object-cover bg-gray-800" />}
            <input 
              id="logo-upload" 
              type="file" 
              accept="image/*" 
              onChange={handleLogoChange} 
              className="block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-red-600/20 file:text-red-300 hover:file:bg-red-600/40" 
              disabled={loading} 
              title="Upload your channel logo to automatically include it in the banner." 
            />
          </div>
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full bg-red-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-red-700 disabled:bg-red-800 disabled:cursor-not-allowed transition-colors duration-300 flex items-center justify-center"
        >
          {loading ? (
            <>
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-3"></div>
              Generating...
            </>
          ) : (
            'Generate Banner'
          )}
        </button>
      </form>
      <ImagePreview imageUrl={imageUrl} loading={loading} error={error} assetType="Banner" />
    </div>
  );
};

export default BannerGenerator;
import React, { useState } from 'react';
import { generateImageWithImageInput, generateText } from '../services/geminiService';
import ImagePreview from './ImagePreview';
import { AssetType } from '../types';
import { getFriendlyErrorMessage } from '../utils/errorHandler';

interface ThumbnailGeneratorProps {
  onAssetGenerated: (item: { type: AssetType, imageUrl: string, prompt: string }) => void;
}

const ThumbnailGenerator: React.FC<ThumbnailGeneratorProps> = ({ onAssetGenerated }) => {
  const [songTitle, setSongTitle] = useState<string>('');
  const [singerName, setSingerName] = useState<string>('');
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);

  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [imageUrl, setImageUrl] = useState<string | null>(null);


  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setImageFile(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        const result = reader.result as string;
        // remove the data:mime/type;base64, prefix
        resolve(result.split(',')[1]);
      };
      reader.onerror = (error) => reject(error);
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!songTitle || !singerName || !imageFile) {
      setError('Please fill in all fields and upload an image.');
      return;
    }

    setLoading(true);
    setError(null);
    setImageUrl(null);

    try {
      const descriptionPrompt = `Generate a short, creative, and visually descriptive prompt for a YouTube song thumbnail. Based on the song title "${songTitle}" by "${singerName}", describe a fitting mood, style, color palette, and background elements.`;
      
      const creativeDescription = await generateText(descriptionPrompt);

      const base64Data = await fileToBase64(imageFile);
      const fullPrompt = `Create an eye-catching YouTube song thumbnail (1280x720 pixels).
        - Song Title: "${songTitle}"
        - Artist: "${singerName}"
        - Visual Theme: "${creativeDescription}"
        
        Instructions:
        1. Use the provided image of the artist as the main subject, integrating them seamlessly.
        2. Create a professional, high-quality background based on the Visual Theme.
        3. Add the song title and artist's name using a stylish, highly readable font. Ensure text is prominent and well-placed.
        4. The final image must be exactly 1280x720 pixels and look like a professional music thumbnail.`;
        
      const resultUrl = await generateImageWithImageInput(fullPrompt, base64Data, imageFile.type);
      setImageUrl(resultUrl);

      onAssetGenerated({
        type: AssetType.Thumbnail,
        imageUrl: resultUrl,
        prompt: `Title: ${songTitle}, Artist: ${singerName}`,
      });
    } catch (err: any) {
      setError(getFriendlyErrorMessage(err));
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <h2 className="text-2xl font-bold text-center mb-1 text-red-400">Song Thumbnail Generator</h2>
      <p className="text-center text-gray-400 mb-6">Provide song details and an image. Our AI will automatically generate a creative theme for your thumbnail (1280x720 px).</p>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label htmlFor="song-title" className="block text-sm font-medium text-gray-300 mb-1">Song Title</label>
            <input id="song-title" type="text" value={songTitle} onChange={(e) => setSongTitle(e.target.value)} placeholder="e.g., Midnight City Lights" className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:ring-red-500 focus:border-red-500 transition" disabled={loading} title="Enter the full title of the song." />
          </div>
          <div>
            <label htmlFor="singer-name" className="block text-sm font-medium text-gray-300 mb-1">Singer / Artist Name</label>
            <input id="singer-name" type="text" value={singerName} onChange={(e) => setSingerName(e.target.value)} placeholder="e.g., Aria" className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:ring-red-500 focus:border-red-500 transition" disabled={loading} title="Enter the name of the artist or band." />
          </div>
        </div>
        <div>
          <label htmlFor="image-upload" className="block text-sm font-medium text-gray-300 mb-1">Upload Singer/Artist Image</label>
          <div className="mt-2 flex items-center gap-4">
            {imagePreview && <img src={imagePreview} alt="Preview" className="w-16 h-16 rounded-md object-cover" />}
            <input id="image-upload" type="file" accept="image/*" onChange={handleImageChange} className="block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-red-600/20 file:text-red-300 hover:file:bg-red-600/40" disabled={loading} title="Upload a high-quality photo of the artist. This will be the main focus of the thumbnail." />
          </div>
        </div>
        <button type="submit" disabled={loading} className="w-full bg-red-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-red-700 disabled:bg-red-800 disabled:cursor-not-allowed transition-colors duration-300 flex items-center justify-center">
          {loading ? (
            <><div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-3"></div> Generating Thumbnail...</>
          ) : 'Generate Thumbnail'}
        </button>
      </form>
      <ImagePreview imageUrl={imageUrl} loading={loading} error={error} assetType="Thumbnail" />
    </div>
  );
};

export default ThumbnailGenerator;
import React, { useState, useEffect, useRef } from 'react';
import { generateText } from '../services/geminiService';
import { getFriendlyErrorMessage } from '../utils/errorHandler';

const DescriptionGenerator: React.FC = () => {
  const [songTitle, setSongTitle] = useState<string>('');
  const [singerName, setSingerName] = useState<string>('');
  const [language, setLanguage] = useState<string>('English');
  
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [generatedDescription, setGeneratedDescription] = useState<string | null>(null);
  const [copySuccess, setCopySuccess] = useState<string>('');

  const songTitleInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    songTitleInputRef.current?.focus();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!songTitle.trim() || !singerName.trim()) {
      setError('Please provide both song title and artist name.');
      return;
    }

    setLoading(true);
    setError(null);
    setGeneratedDescription(null);
    setCopySuccess('');

    try {
        const prompt = `Generate a compelling YouTube video description in ${language} for the song "${songTitle}" by "${singerName}". The description should be enthusiastic, mention both the song title and artist, include a call to action (e.g., "Listen now on your favorite streaming platforms!", "Don't forget to Like, Share, and Subscribe!"), and end with a list of 5 relevant hashtags in the same language.`;
        const result = await generateText(prompt);
        setGeneratedDescription(result);
    } catch (err: any) {
        setError(getFriendlyErrorMessage(err));
    } finally {
        setLoading(false);
    }
  };
  
  const handleCopy = () => {
    if (generatedDescription) {
        navigator.clipboard.writeText(generatedDescription).then(() => {
            setCopySuccess('Copied!');
            setTimeout(() => setCopySuccess(''), 2000);
        }, () => {
            setCopySuccess('Failed to copy');
        });
    }
  };

  return (
    <div>
      <h2 className="text-2xl font-bold text-center mb-1 text-red-400">YouTube Description Generator</h2>
      <p className="text-center text-gray-400 mb-6">Enter song details to generate a description with hashtags in your chosen language.</p>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="song-title-desc" className="block text-sm font-medium text-gray-300 mb-1">Song Title</label>
          <input ref={songTitleInputRef} id="song-title-desc" type="text" value={songTitle} onChange={(e) => setSongTitle(e.target.value)} placeholder="e.g., Midnight City Lights" className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:ring-red-500 focus:border-red-500 transition" disabled={loading} />
        </div>
        <div>
          <label htmlFor="singer-name-desc" className="block text-sm font-medium text-gray-300 mb-1">Singer / Artist Name</label>
          <input id="singer-name-desc" type="text" value={singerName} onChange={(e) => setSingerName(e.target.value)} placeholder="e.g., Aria" className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:ring-red-500 focus:border-red-500 transition" disabled={loading} />
        </div>
        <div>
            <label htmlFor="language-select" className="block text-sm font-medium text-gray-300 mb-1">Language</label>
            <select
                id="language-select"
                value={language}
                onChange={(e) => setLanguage(e.target.value)}
                className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:ring-red-500 focus:border-red-500 transition"
                disabled={loading}
            >
                <option value="English">English</option>
                <option value="Hindi">Hindi</option>
                <option value="Gujarati">Gujarati</option>
                <option value="Spanish">Spanish</option>
                <option value="French">French</option>
                <option value="German">German</option>
                <option value="Japanese">Japanese</option>
            </select>
        </div>
        <button type="submit" disabled={loading} className="w-full bg-red-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-red-700 disabled:bg-red-800 disabled:cursor-not-allowed transition-colors duration-300 flex items-center justify-center">
          {loading ? (
            <><div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-3"></div> Generating...</>
          ) : 'Generate Description'}
        </button>
      </form>
      
      {loading && (
          <div className="mt-6 w-full h-48 flex flex-col items-center justify-center bg-gray-700/50 rounded-lg border-2 border-dashed border-gray-600">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500"></div>
            <p className="mt-4 text-gray-300">Generating description...</p>
          </div>
      )}

      {error && (
        <div className="mt-6 w-full p-4 flex items-center justify-center bg-red-900/30 text-red-300 border border-red-700 rounded-lg">
          <p><strong>Error:</strong> {error}</p>
        </div>
      )}

      {generatedDescription && !loading && (
        <div className="mt-6 space-y-4">
          <h3 className="text-xl font-semibold text-center">Generated Description</h3>
          <div className="bg-gray-800 p-4 rounded-md whitespace-pre-wrap font-mono text-sm text-gray-300 relative border border-gray-600">
            <button
              onClick={handleCopy}
              className="absolute top-2 right-2 bg-gray-600 hover:bg-gray-500 text-white font-bold py-1 px-3 rounded text-xs transition-colors"
              title="Copy to clipboard"
            >
              {copySuccess || 'Copy'}
            </button>
            <p>{generatedDescription}</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default DescriptionGenerator;
import React, { useState, useEffect } from 'react';
import { GoogleGenAI } from "@google/genai";
import { AssetType } from '../types';
import { getFriendlyErrorMessage } from '../utils/errorHandler';

interface IntroGeneratorProps {
  onAssetGenerated: (item: { type: AssetType, imageUrl: string, prompt: string }) => void;
}

const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        const result = reader.result as string;
        // remove the data:mime/type;base64, prefix
        resolve(result.split(',')[1]);
      };
      reader.onerror = (error) => reject(error);
    });
};

const IntroGenerator: React.FC<IntroGeneratorProps> = ({ onAssetGenerated }) => {
  const [channelName, setChannelName] = useState('');
  const [logoFile, setLogoFile] = useState<File | null>(null);
  const [logoPreview, setLogoPreview] = useState<string | null>(null);
  
  const [loading, setLoading] = useState<boolean>(false);
  const [loadingMessage, setLoadingMessage] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [imageUrl, setImageUrl] = useState<string | null>(null);

  const [apiKeySelected, setApiKeySelected] = useState(false);

  useEffect(() => {
    const checkApiKey = async () => {
      const hasKey = await window.aistudio.hasSelectedApiKey();
      setApiKeySelected(hasKey);
    };
    checkApiKey();
  }, []);

  const handleSelectKey = async () => {
    try {
      await window.aistudio.openSelectKey();
      // Assume success after the dialog closes to avoid race conditions.
      setApiKeySelected(true);
    } catch (e) {
      console.error("Failed to select API key", e);
      setError("You must select an API key to proceed.");
    }
  };
  
  const handleLogoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setLogoFile(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setLogoPreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!channelName.trim() || !logoFile) {
      setError('Please provide a channel name and upload a logo.');
      return;
    }

    setLoading(true);
    setError(null);
    setImageUrl(null);

    // FIX: Use process.env.API_KEY as per the coding guidelines for video generation.
    const apiKey = process.env.API_KEY;
    if (!apiKey) {
      setError("API_KEY is not configured. Please use the 'Select API Key' button to provide one.");
      setApiKeySelected(false);
      setLoading(false);
      return;
    }

    try {
        setLoadingMessage('Initializing AI client...');
        const ai = new GoogleGenAI({ apiKey: apiKey });
        
        setLoadingMessage('Preparing assets...');
        const base64Logo = await fileToBase64(logoFile);

        const prompt = `Create a professional, 5-second YouTube channel intro video with a 16:9 aspect ratio.
- Channel Name: "${channelName}"
- Instructions:
1. Incorporate the provided channel logo.
2. The style should be modern, dynamic, and engaging with clean animations.
3. The logo and channel name should be revealed creatively.
4. The final output must be high-energy and suitable as a channel intro.`;

        setLoadingMessage('Starting video generation...');
        let operation = await ai.models.generateVideos({
            model: 'veo-3.1-fast-generate-preview',
            prompt: prompt,
            image: {
                imageBytes: base64Logo,
                mimeType: logoFile.type,
            },
            config: {
                numberOfVideos: 1,
                resolution: '720p',
                aspectRatio: '16:9'
            }
        });

        setLoadingMessage('Processing video... This can take a few minutes.');
        while (!operation.done) {
            await new Promise(resolve => setTimeout(resolve, 10000));
            operation = await ai.operations.getVideosOperation({ operation: operation });
        }
        
        setLoadingMessage('Finalizing video...');
        const downloadLink = operation.response?.generatedVideos?.[0]?.video?.uri;

        if (!downloadLink) {
            throw new Error("Video generation failed to produce a download link.");
        }

        const videoResponse = await fetch(`${downloadLink}&key=${apiKey}`);
        if (!videoResponse.ok) {
            throw new Error(`Failed to download video: ${videoResponse.statusText}`);
        }

        const videoBlob = await videoResponse.blob();
        const generatedVideoUrl = URL.createObjectURL(videoBlob);
        
        setImageUrl(generatedVideoUrl);
        onAssetGenerated({
            type: AssetType.Intro,
            imageUrl: generatedVideoUrl,
            prompt: `Intro for: ${channelName}`,
        });

    } catch (err: any) {
      const friendlyMessage = getFriendlyErrorMessage(err);
      if (friendlyMessage.toLowerCase().includes('api key')) {
        setApiKeySelected(false);
      }
      setError(friendlyMessage);
    } finally {
      setLoading(false);
      setLoadingMessage('');
    }
  };

  if (!apiKeySelected) {
    return (
        <div className="text-center p-6 bg-gray-900/50 rounded-lg border border-yellow-700">
            <h3 className="text-xl font-bold text-yellow-400 mb-2">Action Required: Enable Video Generation</h3>
            <p className="text-gray-400 mb-4 text-left space-y-2">
                <span>The powerful video AI (Veo) used for intros requires a Google Cloud project with billing enabled. This is a one-time setup step required by Google.</span>
                <br/>
                <span>While the project requires billing, Google often provides a generous free tier for new users. Please check the official <a href="https://ai.google.dev/gemini-api/docs/billing" target="_blank" rel="noopener noreferrer" className="text-red-400 underline hover:text-red-300">billing documentation</a> for the most current pricing details.</span>
            </p>
            <button
                onClick={handleSelectKey}
                className="mt-2 bg-yellow-500 text-gray-900 font-bold py-2 px-6 rounded-lg hover:bg-yellow-600 transition-colors duration-300"
            >
                Select API Key & Proceed
            </button>
        </div>
    );
  }

  return (
    <div>
      <h2 className="text-2xl font-bold text-center mb-1 text-red-400">YouTube Intro Generator</h2>
      <p className="text-center text-gray-400 mb-6">Create a 5-second intro video with your channel name and logo.</p>
      
      {!loading && !imageUrl && (
        <form onSubmit={handleSubmit} className="space-y-4">
            <div>
                <label htmlFor="channel-name" className="block text-sm font-medium text-gray-300 mb-1">Channel Name</label>
                <input id="channel-name" type="text" value={channelName} onChange={(e) => setChannelName(e.target.value)} placeholder="e.g., The Tech Sphere" className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:ring-red-500 focus:border-red-500 transition" disabled={loading} />
            </div>
            <div>
                <label htmlFor="logo-upload-intro" className="block text-sm font-medium text-gray-300 mb-1">Upload Channel Logo</label>
                <div className="mt-2 flex items-center gap-4">
                    {logoPreview && <img src={logoPreview} alt="Logo Preview" className="w-16 h-16 rounded-full object-cover bg-gray-800" />}
                    <input id="logo-upload-intro" type="file" accept="image/*" onChange={handleLogoChange} className="block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-red-600/20 file:text-red-300 hover:file:bg-red-600/40" disabled={loading} />
                </div>
            </div>
            <button type="submit" disabled={loading} className="w-full bg-red-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-red-700 disabled:bg-red-800 disabled:cursor-not-allowed transition-colors duration-300 flex items-center justify-center">
                Generate Intro
            </button>
        </form>
      )}

      {loading && (
        <div className="mt-6 w-full h-64 flex flex-col items-center justify-center bg-gray-700/50 rounded-lg border-2 border-dashed border-gray-600">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500"></div>
            <p className="mt-4 text-gray-300 font-semibold">Generating your intro...</p>
            <p className="mt-2 text-sm text-gray-400">{loadingMessage}</p>
        </div>
      )}

      {error && (
        <div className="mt-6 w-full p-4 flex items-center justify-center bg-red-900/30 text-red-300 border border-red-700 rounded-lg">
            <p><strong>Error:</strong> {error}</p>
        </div>
      )}

      {imageUrl && !loading && (
        <div className="mt-6">
            <h3 className="text-xl font-semibold mb-4 text-center">Your Generated Intro</h3>
            <div className="bg-gray-900 p-2 rounded-lg shadow-inner">
                <video src={imageUrl} controls autoPlay loop className="w-full h-auto rounded-md" />
            </div>
            <a href={imageUrl} download="generated-intro.mp4" className="mt-6 w-full inline-block text-center bg-green-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-green-700 transition-colors duration-300">
                Download Video
            </a>
        </div>
      )}
    </div>
  );
};

export default IntroGenerator;
import React from 'react';

interface ImagePreviewProps {
  imageUrl: string | null;
  loading: boolean;
  error: string | null;
  assetType: string;
}

const ImagePreview: React.FC<ImagePreviewProps> = ({ imageUrl, loading, error, assetType }) => {
  if (loading) {
    return (
      <div className="mt-6 w-full h-64 flex flex-col items-center justify-center bg-gray-700/50 rounded-lg border-2 border-dashed border-gray-600">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500"></div>
        <p className="mt-4 text-gray-300">Generating your {assetType.toLowerCase()}...</p>
        <p className="mt-1 text-sm text-gray-400">This may take a moment.</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="mt-6 w-full p-4 flex items-center justify-center bg-red-900/30 text-red-300 border border-red-700 rounded-lg">
        <p><strong>Error:</strong> {error}</p>
      </div>
    );
  }

  if (imageUrl) {
    return (
      <div className="mt-6">
        <h3 className="text-xl font-semibold mb-4 text-center">Your Generated {assetType}</h3>
        <div className="bg-gray-900 p-2 rounded-lg shadow-inner">
           <img src={imageUrl} alt={`Generated ${assetType}`} className="w-full h-auto rounded-md object-contain max-h-[400px]" />
        </div>
        <a
          href={imageUrl}
          download={`generated-${assetType.toLowerCase().replace(' ', '-')}.png`}
          className="mt-6 w-full inline-block text-center bg-green-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-green-700 transition-colors duration-300"
        >
          Download Image
        </a>
      </div>
    );
  }

  return null;
};

export default ImagePreview;
import React from 'react';

interface ImagePreviewProps {
  imageUrl: string | null;
  loading: boolean;
  error: string | null;
  assetType: string;
}

const ImagePreview: React.FC<ImagePreviewProps> = ({ imageUrl, loading, error, assetType }) => {
  if (loading) {
    return (
      <div className="mt-6 w-full h-64 flex flex-col items-center justify-center bg-gray-700/50 rounded-lg border-2 border-dashed border-gray-600">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500"></div>
        <p className="mt-4 text-gray-300">Generating your {assetType.toLowerCase()}...</p>
        <p className="mt-1 text-sm text-gray-400">This may take a moment.</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="mt-6 w-full p-4 flex items-center justify-center bg-red-900/30 text-red-300 border border-red-700 rounded-lg">
        <p><strong>Error:</strong> {error}</p>
      </div>
    );
  }

  if (imageUrl) {
    return (
      <div className="mt-6">
        <h3 className="text-xl font-semibold mb-4 text-center">Your Generated {assetType}</h3>
        <div className="bg-gray-900 p-2 rounded-lg shadow-inner">
           <img src={imageUrl} alt={`Generated ${assetType}`} className="w-full h-auto rounded-md object-contain max-h-[400px]" />
        </div>
        <a
          href={imageUrl}
          download={`generated-${assetType.toLowerCase().replace(' ', '-')}.png`}
          className="mt-6 w-full inline-block text-center bg-green-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-green-700 transition-colors duration-300"
        >
          Download Image
        </a>
      </div>
    );
  }

  return null;
};

export default ImagePreview;
import React from 'react';
import { HistoryItem, AssetType } from '../types';

interface HistoryProps {
  history: HistoryItem[];
  onClearHistory: () => void;
}

const History: React.FC<HistoryProps> = ({ history, onClearHistory }) => {
  if (history.length === 0) {
    return null; // Don't render the section if history is empty
  }

  const handleClearClick = () => {
    if (window.confirm('Are you sure you want to clear your entire generation history? This action cannot be undone.')) {
      onClearHistory();
    }
  };

  return (
    <div className="max-w-7xl mx-auto mt-16">
      <div className="flex justify-between items-center mb-6 px-4 sm:px-0">
        <h2 className="text-3xl font-bold text-gray-200">Generation History</h2>
        {history.length > 0 && (
          <button
            onClick={handleClearClick}
            className="bg-gray-700 text-gray-300 hover:bg-gray-600 font-semibold py-2 px-4 rounded-lg transition-colors duration-300 text-sm"
          >
            Clear History
          </button>
        )}
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {history.map((item) => {
          const fileExtension = item.type === AssetType.Intro ? 'mp4' : 'png';
          const downloadFilename = `generated-${item.type.toLowerCase()}-${item.id}.${fileExtension}`;

          return (
          <div key={item.id} className="bg-gray-800 rounded-lg overflow-hidden shadow-lg border border-gray-700 flex flex-col group transition-all duration-300 hover:shadow-red-500/20 hover:border-red-800">
            <div className="relative overflow-hidden bg-gray-900/50 h-40 flex items-center justify-center">
                {item.imageUrl && ( item.type === AssetType.Intro
                    ? <video src={item.imageUrl} controls className="max-w-full max-h-full object-contain" />
                    : <img src={item.imageUrl} alt={`Generated ${item.type}`} className="max-w-full max-h-full object-contain transition-transform duration-300 group-hover:scale-105" />
                )}
                {item.type !== AssetType.Intro && <div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>}
            </div>

            <div className="p-4 flex flex-col flex-grow">
              <span className={`text-xs font-bold uppercase px-2 py-1 rounded-full self-start ${
                item.type === AssetType.Logo ? 'bg-blue-500/20 text-blue-300' :
                item.type === AssetType.Banner ? 'bg-purple-500/20 text-purple-300' :
                item.type === AssetType.Intro ? 'bg-yellow-500/20 text-yellow-300' :
                'bg-green-500/20 text-green-300'
              }`}>
                {item.type}
              </span>
              <p className="text-sm text-gray-400 mt-2 flex-grow clamp-3" title={item.prompt}>
                {item.prompt}
              </p>
              <p className="text-xs text-gray-500 mt-2 pt-2 border-t border-gray-700/50">
                {new Date(item.createdAt).toLocaleString()}
              </p>
            </div>
            {item.imageUrl && (
              <div className="p-4 bg-gray-900/50 border-t border-gray-700">
                 <a
                  href={item.imageUrl}
                  download={downloadFilename}
                  className="w-full inline-block text-center bg-red-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-red-700 transition-colors duration-300"
                  >
                  Download
                  </a>
              </div>
            )}
          </div>
        )})}
      </div>
       <style>{`
        .clamp-3 {
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 3;
            overflow: hidden;
            text-overflow: ellipsis;
            min-height: 4.5rem; /* 3 lines * 1.5rem line-height */
        }
      `}</style>
    </div>
  );
};

export default History;
